{% extends 'base.html.twig' %}

{% block title %}MealMatch- Nouvelle Recette{% endblock %}

{% block body %}
<div class="container">
<h1 class="mt-4">Nouvelle Recette</h1>
{{ form_start(form) }}

		<div class="form-group">
			{{ form_label(form.titre) }}
			{{ form_widget(form.titre) }}
			<div class="form-error">
				{{ form_errors(form.titre) }}
			</div>
		</div>

		<div class="form-group">
			{{ form_label(form.tempsCuisson) }}
			{{ form_widget(form.tempsCuisson) }}
			<div class="form-error">
				{{ form_errors(form.tempsCuisson) }}
			</div>
		</div>

		<div class="form-group">
			{{ form_label(form.dureePreparation) }}
			{{ form_widget(form.dureePreparation) }}
			<div class="form-error">
				{{ form_errors(form.dureePreparation) }}
			</div>
		</div>

		<div class="form-group">
			{{ form_label(form.nbPersonne) }}
			{{ form_widget(form.nbPersonne) }}
			<div class="form-error">
				{{ form_errors(form.nbPersonne) }}
			</div>
		</div>

		<div class="form-group">
			{{ form_label(form.description) }}
			{{ form_widget(form.description) }}
			<div class="form-error">
				{{ form_errors(form.description) }}
			</div>
		</div>

		<div class="form-group">
			{{ form_label(form.photo) }}
			{{ form_widget(form.photo) }}
			<div class="form-error">
				{{ form_errors(form.photo) }}
			</div>
		</div>		
    

		{# the data-index attribute is required for the JavaScript code below #}
		<div class="form-group">
		<ul class="details"
			data-index="{{ form.details|length > 0 ? form.details|last.vars.name + 1 : 0 }}"  
			data-prototype="{{ form_widget(form.details.vars.prototype)|e('html_attr') }}">
			
		{# ce code est pour lupdate, pour afficher les détails éxistants #}	
			{{ form_widget (formSearch) }} {# cet élément, appartenant à un autre form, sera ignoré dans le submit 
											on doit gérer son "change" en JS #}

			{% for detail in form.details %}
				{# arranger la liste et son css selon les besoins #}
            	<li>Qté: {{ form_row(detail.quantite) }} Mésure:{{ form_row(detail.mesure) }}</li>
				<li style="display:none">{{ form_row(detail.ingredients) }}</li>
        	{% endfor %}
		
		</ul>
		</div>
		{# <button type="button" class="add_item_link" data-collection-holder-class="details">+</button> #}


		{{ form_row(form._token) }}
		<div class="form-group">
			{{ form_widget(form.submit) }}
		</div>
	
{{ form_end(form, {render_rest:false}) }}



</div>




{% block customJS %}
<script>

// code js pour rajouter les nouveaux détails. On doit le modifier pour l'adapter à nos besoins
// (on ne peut plus choisir l'ingrédient, ce ne sera plus une liste déroulante)
// Ce script crée les <li> pour le DOM. Tout modification du css ou de layout
// sera faite dans le script

// ceci est le code original, plus bas une modification possible pour
// afficher l'ingrédient comme un texte au lieu d'une liste déroulante.
// On va cacher la liste déroulante. On ne peut pas l'effacer car autrement 
// les détails ne s'enverront plus quand on fait submit!

{# 
const addFormToCollection = (e) => {
  const collectionHolder = document.querySelector('.' + e.currentTarget.dataset.collectionHolderClass);
  const item = document.createElement('li');
  item.innerHTML = collectionHolder
    .dataset
    .prototype
    .replace(
      /__name__/g,
      collectionHolder.dataset.index
    );
  collectionHolder.appendChild(item);
  collectionHolder.dataset.index++;

	 
}; 
#}

const addFormToCollection = (e) => {
  const collectionHolder = document.querySelector('.' + e.currentTarget.dataset.collectionHolderClass);
  const item = document.createElement('li');
  item.innerHTML = collectionHolder
    .dataset
    .prototype
    .replace(
      /__name__/g,
      collectionHolder.dataset.index
    );
  collectionHolder.appendChild(item);
  collectionHolder.dataset.index++;

	 
};


document
  .querySelectorAll('.add_item_link')
  .forEach(btn => {
      btn.addEventListener("click", addFormToCollection)
  });




</script>

{% endblock %}

{% endblock %}

